{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Orders extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      orders: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    //this.props.onFetchOrders(this.props.token, this.props.userId);\n    this.props.onFetchOrders();\n    axios.get('/orders.json').then(response => {\n      this.setState({\n        loading: false\n      });\n      console.log(response);\n      console.log(\"printing response.data\");\n      console.log(response.data.customerName); //this.setState({ingredients:response.data});\n      // this.props.FetchOrdersSuccess(response.data)\n\n      const fetchOrders = [];\n\n      for (let key in response.data) {\n        fetchOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      console.log(\"logging fetchOrders\");\n      console.log(fetchOrders);\n      this.setState({\n        orders: fetchOrders\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n      console.log(error);\n    });\n  }\n\n  render() {\n    let orders = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 18\n    }, this); //if (!this.props.loading){\n\n\n    orders = this.props.orders.map(order => /*#__PURE__*/_jsxDEV(Order, {\n      ingredients: order.ingredients,\n      price: order.price\n    }, order.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)); // let ords = (<Aux>\n    //   <Order key ='1' price='4'\n    //     />\n    //     <Order\n    //       key ='2' price='4'\n    //     />\n    //     </Aux>);\n    //}\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: orders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading // token: state.auth.token,\n    // userId: state.auth.userId\n\n  };\n}; // const mapDispatchToProps = dispatch => {\n//   return {\n//     onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n//   };\n// };\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders()),\n    onFetchOrdersSuccess: orders => dispatch(actions.fetchOrdersSuccess(orders))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js"],"names":["React","connect","Order","axios","withErrorHandler","actions","Spinner","Aux","Orders","Component","state","orders","loading","componentDidMount","props","onFetchOrders","get","then","response","setState","console","log","data","customerName","fetchOrders","key","push","id","catch","error","render","map","order","ingredients","price","mapStateToProps","mapDispatchToProps","dispatch","onFetchOrdersSuccess","fetchOrdersSuccess"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport Aux from '../../hoc/Aux'\n\nclass Orders extends React.Component {\n\n  state = {\n    orders: [],\n    loading : true,\n  }\n  componentDidMount(){\n    //this.props.onFetchOrders(this.props.token, this.props.userId);\n    this.props.onFetchOrders();\n\n    axios.get('/orders.json').then(response=>{\n      this.setState({loading:false});\n\n      console.log(response);\n      console.log(\"printing response.data\");\n      console.log(response.data.customerName);\n      //this.setState({ingredients:response.data});\n     // this.props.FetchOrdersSuccess(response.data)\n\n     const fetchOrders = [];\n\n     for(let key in response.data){\n       fetchOrders.push({\n         ...response.data[key],\n         id : key\n       })\n     }\n     console.log(\"logging fetchOrders\");\n     console.log(fetchOrders);\n\nthis.setState({orders : fetchOrders})\n      \n    }).catch(error=>{\n\n      this.setState({loading:false});\n\n\n      console.log(error)\n\n    });\n\n\n  }\n  render(){\n    let orders = <Spinner />\n    //if (!this.props.loading){\n      \n      orders =this.props.orders.map(order => (\n        <Order\n          key={order.id}\n          ingredients={order.ingredients}\n          price={order.price} />\n          \n        \n      ))\n\n      // let ords = (<Aux>\n      //   <Order key ='1' price='4'\n      //     />\n\n      //     <Order\n      //       key ='2' price='4'\n      //     />\n      //     </Aux>);\n    //}\n    return (\n      <div>\n        {orders}\n        {/* {ords} */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    // token: state.auth.token,\n    // userId: state.auth.userId\n  };\n};\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n//   };\n// };\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders()),\n    onFetchOrdersSuccess: (orders) => dispatch(actions.fetchOrdersSuccess(orders))\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\n"]},"metadata":{},"sourceType":"module"}