{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Orders extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      orders: [],\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    // this.props.onFetchOrders(this.props.token, this.props.userId);\n    console.log(\"loging token in orders\");\n    console.log(this.props.token);\n    this.props.onFetchOrders(this.props.token);\n  }\n\n  componentWillUpdate() {\n    console.log(\"loging token in orders\");\n    console.log(this.props.token);\n    this.props.onFetchOrders(this.props.token);\n  }\n\n  render() {\n    let orders = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 18\n    }, this); //if (!this.props.loading){\n\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => /*#__PURE__*/_jsxDEV(Order, {\n        ingredients: order.ingredients,\n        price: order.price\n      }, order.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: orders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: token => dispatch(actions.fetchOrders(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js"],"names":["React","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","Component","state","orders","loading","componentDidMount","console","log","props","token","onFetchOrders","componentWillUpdate","render","map","order","ingredients","price","id","mapStateToProps","auth","userId","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;;AAEA,MAAMC,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEnCC,KAFmC,GAE3B;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,OAAO,EAAC;AAFF,KAF2B;AAAA;;AAMnCC,EAAAA,iBAAiB,GAAE;AAClB;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACCD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAvB;AACA,SAAKD,KAAL,CAAWE,aAAX,CAAyB,KAAKF,KAAL,CAAWC,KAApC;AAEA;;AAEDE,EAAAA,mBAAmB,GAAE;AACnBL,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAvB;AACA,SAAKD,KAAL,CAAWE,aAAX,CAAyB,KAAKF,KAAL,CAAWC,KAApC;AACD;;AACDG,EAAAA,MAAM,GAAE;AACN,QAAIT,MAAM,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAb,CADM,CAEN;;;AACC,QAAI,CAAC,KAAKK,KAAL,CAAWJ,OAAhB,EAAwB;AACvBD,MAAAA,MAAM,GACJ,KAAKK,KAAL,CAAWL,MAAX,CAAkBU,GAAlB,CAAsBC,KAAK,iBAC3B,QAAC,KAAD;AAEE,QAAA,WAAW,EAAEA,KAAK,CAACC,WAFrB;AAGE,QAAA,KAAK,EAAED,KAAK,CAACE;AAHf,SACOF,KAAK,CAACG,EADb;AAAA;AAAA;AAAA;AAAA,cADA,CADF;AAOD;;AACD,wBACE;AAAA,gBACGd;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AApCkC;;AAuCrC,MAAMe,eAAe,GAAGhB,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaA,MADhB;AAELC,IAAAA,OAAO,EAAEF,KAAK,CAACC,MAAN,CAAaC,OAFjB;AAGLK,IAAAA,KAAK,EAAEP,KAAK,CAACiB,IAAN,CAAWV,KAHb;AAILW,IAAAA,MAAM,EAAElB,KAAK,CAACiB,IAAN,CAAWC;AAJd,GAAP;AAMD,CAPD;;AASA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLZ,IAAAA,aAAa,EAAGD,KAAD,IAAWa,QAAQ,CAACxB,OAAO,CAACyB,WAAR,CAAoBd,KAApB,CAAD;AAD7B,GAAP;AAGD,CAJD;;AAOA,eAAef,OAAO,CAACwB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAA7D,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends React.Component {\n\n  state = {\n    orders :[],\n    loading:false\n  }\n  componentDidMount(){\n   // this.props.onFetchOrders(this.props.token, this.props.userId);\n  console.log(\"loging token in orders\")\n   console.log(this.props.token);\n   this.props.onFetchOrders(this.props.token);\n\n  }\n\n  componentWillUpdate(){\n    console.log(\"loging token in orders\")\n    console.log(this.props.token);\n    this.props.onFetchOrders(this.props.token);\n  }\n  render(){\n    let orders = <Spinner />\n    //if (!this.props.loading){\n     if (!this.props.loading){\n      orders =\n        this.props.orders.map(order => (\n        <Order\n          key={order.id}\n          ingredients={order.ingredients}\n          price={order.price} />\n      ))\n    }\n    return (\n      <div>\n        {orders}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token) => dispatch(actions.fetchOrders(token))\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\n"]},"metadata":{},"sourceType":"module"}