{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Checkout/ContactData/ContactData.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport classes from './ContactData.module.css';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        postCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Postcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 7,\n            maxLength: 7\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'medium',\n              displayValue: 'Medium'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'cheapest',\n          valid: true,\n          validation: {}\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = e => {\n      e.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      ;\n      const order = {\n        ingredients: this.props.ings,\n        //price should be on server side to prevent manipulation!\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //clones - for immutable\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"in ContactData\");\n    console.log(\"component did mount\");\n    console.log(this.props);\n  }\n\n  componentDidUpdate() {\n    console.log(\"in ContactData\");\n    console.log(\"component did update\");\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = null;\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 14\n      }, this);\n    } else {\n      form = /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: event => this.inputChangedHandler(event, formElement.id)\n        }, formElement.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          disabled: !this.state.formIsValid,\n          clicked: this.orderHandler,\n          children: \"ORDER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your contact data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading //token: state.auth.token,\n    //userId: state.auth.userId,\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n}; //export default ContactData;\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","connect","Button","Spinner","Input","axios","classes","withErrorHandler","actions","checkValidity","ContactData","Component","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","postCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","setState","componentDidMount","console","log","componentDidUpdate","render","formElementsArray","key","push","id","config","form","loading","map","formElement","mapStateToProps","burgerBuilder","totalPrice","orders","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,gBAAP,MAA6B,gDAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;;AACA,MAAMC,WAAN,SAA0BV,KAAK,CAACW,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAgBxCC,KAhBwC,GAgBhC;AACNC,MAAAA,SAAS,EAAE;AACTC,QAAAA,IAAI,EAAE;AACJC,UAAAA,WAAW,EAAE,OADT;AAEJC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFX;AAMJC,UAAAA,KAAK,EAAE,EANH;AAOJC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPR;AAUJC,UAAAA,KAAK,EAAE,KAVH;AAWJC,UAAAA,OAAO,EAAE;AAXL,SADG;AAcTC,QAAAA,MAAM,EAAE;AACNT,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPN;AAUNC,UAAAA,KAAK,EAAE,KAVD;AAWNC,UAAAA,OAAO,EAAE;AAXH,SAdC;AA2BTE,QAAAA,QAAQ,EAAE;AACRV,UAAAA,WAAW,EAAE,OADL;AAERC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFP;AAMRC,UAAAA,KAAK,EAAE,EANC;AAORC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE,IADA;AAEVK,YAAAA,SAAS,EAAE,CAFD;AAGVC,YAAAA,SAAS,EAAE;AAHD,WAPJ;AAYRL,UAAAA,KAAK,EAAE,KAZC;AAaRC,UAAAA,OAAO,EAAE;AAbD,SA3BD;AA0CTK,QAAAA,OAAO,EAAE;AACPb,UAAAA,WAAW,EAAE,OADN;AAEPC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,MADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFR;AAMPC,UAAAA,KAAK,EAAE,EANA;AAOPC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPL;AAUPC,UAAAA,KAAK,EAAE,KAVA;AAWPC,UAAAA,OAAO,EAAE;AAXF,SA1CA;AAuDTM,QAAAA,KAAK,EAAE;AACLd,UAAAA,WAAW,EAAE,OADR;AAELC,UAAAA,aAAa,EAAE;AACbC,YAAAA,IAAI,EAAE,OADO;AAEbC,YAAAA,WAAW,EAAE;AAFA,WAFV;AAMLC,UAAAA,KAAK,EAAE,EANF;AAOLC,UAAAA,UAAU,EAAE;AACVC,YAAAA,QAAQ,EAAE;AADA,WAPP;AAULC,UAAAA,KAAK,EAAE,KAVF;AAWLC,UAAAA,OAAO,EAAE;AAXJ,SAvDE;AAoETO,QAAAA,cAAc,EAAE;AACdf,UAAAA,WAAW,EAAE,QADC;AAEdC,UAAAA,aAAa,EAAE;AACbe,YAAAA,OAAO,EAAE,CACP;AAACZ,cAAAA,KAAK,EAAE,SAAR;AAAmBa,cAAAA,YAAY,EAAE;AAAjC,aADO,EAEP;AAACb,cAAAA,KAAK,EAAE,QAAR;AAAkBa,cAAAA,YAAY,EAAE;AAAhC,aAFO,EAGP;AAACb,cAAAA,KAAK,EAAE,UAAR;AAAoBa,cAAAA,YAAY,EAAE;AAAlC,aAHO;AADI,WAFD;AASdb,UAAAA,KAAK,EAAE,UATO;AAUdG,UAAAA,KAAK,EAAE,IAVO;AAWdF,UAAAA,UAAU,EAAE;AAXE;AApEP,OADL;AAmFNa,MAAAA,WAAW,EAAE;AAnFP,KAhBgC;;AAAA,SAsGxCC,YAtGwC,GAsGxBC,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,qBAAT,IAAkC,KAAK1B,KAAL,CAAWC,SAA7C,EAAuD;AACrDwB,QAAAA,QAAQ,CAACC,qBAAD,CAAR,GAAkC,KAAK1B,KAAL,CAAWC,SAAX,CAAqByB,qBAArB,EAA4CnB,KAA9E;AACD;;AAAA;AACD,YAAMoB,KAAK,GAAG;AACZC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWC,IADZ;AAEZ;AACAC,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAHN;AAIZC,QAAAA,SAAS,EAAEP,QAJC;AAKZQ,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI;AALP,OAAd;AAOA,WAAKJ,KAAL,CAAWK,aAAX,CAAyBP,KAAzB;AACD,KApHuC;;AAAA,SAsHxCQ,mBAtHwC,GAsHlB,CAACC,KAAD,EAAQC,eAAR,KAA4B;AAChD;AACA,YAAMC,gBAAgB,GAAG,EACvB,GAAG,KAAKtC,KAAL,CAAWC;AADS,OAAzB;AAGA,YAAMsC,kBAAkB,GAAG,EACzB,GAAGD,gBAAgB,CAACD,eAAD;AADM,OAA3B;AAGAE,MAAAA,kBAAkB,CAAChC,KAAnB,GAA2B6B,KAAK,CAACI,MAAN,CAAajC,KAAxC;AACAgC,MAAAA,kBAAkB,CAAC7B,KAAnB,GAA2Bb,aAAa,CAAC0C,kBAAkB,CAAChC,KAApB,EAA2BgC,kBAAkB,CAAC/B,UAA9C,CAAxC;AACA+B,MAAAA,kBAAkB,CAAC5B,OAAnB,GAA6B,IAA7B;AACA2B,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAoCE,kBAApC;AACA,UAAIlB,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIgB,eAAT,IAA4BC,gBAA5B,EAA8C;AAC5CjB,QAAAA,WAAW,GAAGiB,gBAAgB,CAACD,eAAD,CAAhB,CAAkC3B,KAAlC,IAA2CW,WAAzD;AACD;;AACD,WAAKoB,QAAL,CAAc;AACZxC,QAAAA,SAAS,EAAEqC,gBADC;AAEZjB,QAAAA,WAAW,EAAEA;AAFD,OAAd;AAID,KA1IuC;AAAA;;AAExCqB,EAAAA,iBAAiB,GAAE;AAEjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAjB;AAED;;AAEDgB,EAAAA,kBAAkB,GAAE;AAClBF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAED;;AA8HDE,EAAAA,MAAM,GAAE;AACN,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAI,IAAIC,GAAR,IAAe,KAAKhD,KAAL,CAAWC,SAA1B,EAAoC;AAClC8C,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACrBC,QAAAA,EAAE,EAAEF,GADiB;AAErBG,QAAAA,MAAM,EAAE,KAAKnD,KAAL,CAAWC,SAAX,CAAqB+C,GAArB;AAFa,OAAvB;AAID;;AACD,QAAII,IAAI,GAAG,IAAX;;AACA,QAAG,KAAKvB,KAAL,CAAWwB,OAAd,EAAuB;AACrBD,MAAAA,IAAI,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,gBACF;AAAM,QAAA,MAAM,EAAC,EAAb;AAAA,mBACGL,iBAAiB,CAACO,GAAlB,CAAsBC,WAAW,iBAChC,QAAC,KAAD;AAEE,UAAA,WAAW,EAAEA,WAAW,CAACJ,MAAZ,CAAmBhD,WAFlC;AAGE,UAAA,aAAa,EAAEoD,WAAW,CAACJ,MAAZ,CAAmB/C,aAHpC;AAIE,UAAA,KAAK,EAAEmD,WAAW,CAACJ,MAAZ,CAAmB5C,KAJ5B;AAKE,UAAA,OAAO,EAAE,CAACgD,WAAW,CAACJ,MAAZ,CAAmBzC,KAL/B;AAME,UAAA,cAAc,EAAE6C,WAAW,CAACJ,MAAZ,CAAmB3C,UANrC;AAOE,UAAA,OAAO,EAAE+C,WAAW,CAACJ,MAAZ,CAAmBxC,OAP9B;AAQE,UAAA,OAAO,EAAGyB,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCmB,WAAW,CAACL,EAA5C;AARtB,WACOK,WAAW,CAACL,EADnB;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAaE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,QAAQ,EAAE,CAAC,KAAKlD,KAAL,CAAWqB,WAAhD;AAA6D,UAAA,OAAO,EAAE,KAAKC,YAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAE5B,OAAO,CAACI,WAAxB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGsD,IAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAhLuC;;AAkL1C,MAAMI,eAAe,GAAGxD,KAAK,IAAI;AAC/B,SAAO;AACL8B,IAAAA,IAAI,EAAE9B,KAAK,CAACyD,aAAN,CAAoB7B,WADrB;AAELG,IAAAA,KAAK,EAAE/B,KAAK,CAACyD,aAAN,CAAoBC,UAFtB;AAGLL,IAAAA,OAAO,EAAErD,KAAK,CAAC2D,MAAN,CAAaN,OAHjB,CAIL;AACA;;AALK,GAAP;AAOD,CARD;;AAUA,MAAMO,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL;AACA3B,IAAAA,aAAa,EAAGF,SAAD,IAAe6B,QAAQ,CAACjE,OAAO,CAACkE,cAAR,CAAuB9B,SAAvB,CAAD;AAFjC,GAAP;AAKD,CAND,C,CAQA;;;AAEA,eAAe3C,OAAO,CAACmE,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CjE,gBAAgB,CAACG,WAAD,EAAcL,KAAd,CAA7D,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport classes from './ContactData.module.css';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\nclass ContactData extends React.Component {\n\n  componentDidMount(){\n\n    console.log(\"in ContactData\")\n    console.log(\"component did mount\");\n    console.log(this.props);\n    \n  }\n\n  componentDidUpdate(){\n    console.log(\"in ContactData\")\n    console.log(\"component did update\");\n\n  }\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      postCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Postcode'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 7,\n          maxLength: 7,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your Email'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'medium', displayValue: 'Medium'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'cheapest',\n        valid: true,\n        validation: {},\n      }\n    },\n    formIsValid: false,\n  }\n\n  orderHandler = (e) => {\n    e.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm){\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n    };\n    const order = {\n      ingredients: this.props.ings,\n      //price should be on server side to prevent manipulation!\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId,\n    }\n    this.props.onOrderBurger(order);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    //clones - for immutable\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm ){\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n    }\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid,\n    })\n  }\n\n  render(){\n    const formElementsArray = [];\n    for(let key in this.state.orderForm){\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n    let form = null;\n    if(this.props.loading) {\n      form = <Spinner />\n    } else {\n      form = (\n        <form action=\"\">\n          {formElementsArray.map(formElement => (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n          ))}\n          <Button btnType='Success' disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\n        </form>\n      );\n    }\n    return(\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading,\n    //token: state.auth.token,\n    //userId: state.auth.userId,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n\n  }\n}\n\n//export default ContactData;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n\n"]},"metadata":{},"sourceType":"module"}