{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Checkout/ContactData/ContactData.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport classes from './ContactData.module.css';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        postCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Postcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 7,\n            maxLength: 7\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'medium',\n              displayValue: 'Medium'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'cheapest',\n          valid: true,\n          validation: {}\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = e => {\n      e.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      ;\n      const order = {\n        ingredients: this.props.ings,\n        //price should be on server side to prevent manipulation!\n        price: this.props.price,\n        orderData: formData //userId: this.props.userId,\n\n      };\n      console.log(\"printing order\");\n      console.log(order);\n      const postOrderRequest = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        customerName: {\n          name: formData.name,\n          address: {\n            street: formData.street,\n            zipcode: formData.zipcode,\n            country: formData.country\n          },\n          email: formData.email\n        },\n        deliverymethod: 'fastest'\n      };\n      axios.post('/orders.json', postOrderRequest).then(response => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n        console.log(response);\n        this.props.navigate('/orders');\n      }).catch(error => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n        console.log(\"printing error\");\n        console.log(error);\n      });\n      this.props.onOrderBurger(order);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //clones - for immutable\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"in ContactData\");\n    console.log(\"component did mount\");\n    console.log(this.props);\n  }\n\n  componentDidUpdate() {\n    console.log(\"in ContactData\");\n    console.log(\"component did update\");\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = null;\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 14\n      }, this);\n    } else {\n      form = /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: event => this.inputChangedHandler(event, formElement.id)\n        }, formElement.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          disabled: !this.state.formIsValid,\n          clicked: this.orderHandler,\n          children: \"ORDER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your contact data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading //token: state.auth.token,\n    //userId: state.auth.userId,\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n}; //export default ContactData;\n\n\nfunction WithNavigate(props) {\n  _s();\n\n  let navigate = useNavigate();\n  const location = useLocation(); //return <Blog {...props} navigate={navigate} location={location} />\n\n  return /*#__PURE__*/_jsxDEV(ContactData, { ...props,\n    navigate: navigate,\n    location: location\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 10\n  }, this);\n}\n\n_s(WithNavigate, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = WithNavigate;\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(WithNavigate, axios)); //export default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n\nvar _c;\n\n$RefreshReg$(_c, \"WithNavigate\");","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","connect","Button","Spinner","Input","axios","classes","withErrorHandler","actions","checkValidity","useNavigate","useLocation","ContactData","Component","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","postCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","console","log","postOrderRequest","customerName","address","zipcode","deliverymethod","post","then","response","setState","loading","purchasing","navigate","catch","error","onOrderBurger","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","componentDidMount","componentDidUpdate","render","formElementsArray","key","push","id","config","form","map","formElement","mapStateToProps","burgerBuilder","totalPrice","orders","mapDispatchToProps","dispatch","purchaseBurger","WithNavigate","location"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport axios from '../../../axios-orders';\nimport classes from './ContactData.module.css';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\nimport {useNavigate,useLocation} from 'react-router-dom';\n\nclass ContactData extends React.Component {\n\n  componentDidMount(){\n\n    console.log(\"in ContactData\")\n    console.log(\"component did mount\");\n    console.log(this.props);\n    \n  }\n\n  componentDidUpdate(){\n    console.log(\"in ContactData\")\n    console.log(\"component did update\");\n\n  }\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      postCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Postcode'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 7,\n          maxLength: 7,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your Email'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'medium', displayValue: 'Medium'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'cheapest',\n        valid: true,\n        validation: {},\n      }\n    },\n    formIsValid: false,\n  }\n\n  orderHandler = (e) => {\n    e.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm){\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n    };\n    const order = {\n      ingredients: this.props.ings,\n      //price should be on server side to prevent manipulation!\n      price: this.props.price,\n      orderData: formData,\n      //userId: this.props.userId,\n    }\n\n    console.log(\"printing order\");\n    console.log(order);\n\n\n      const postOrderRequest={\n            ingredients : this.props.ings,\n            price: this.props.price,\n            customerName:{\n              name:formData.name,\n              address:{\n                street: formData.street,\n                zipcode: formData.zipcode,\n                country: formData.country\n            },\n            email:formData.email,\n\n            },\n            deliverymethod:'fastest'\n        }\n        axios.post('/orders.json',postOrderRequest)\n        .then(response=>{\n\n          this.setState({loading:false,purchasing:false});\n\n          console.log(response);\n\n          this.props.navigate('/orders');\n\n        }).catch(error=>{\n          this.setState({loading:false,purchasing:false});\n\n          console.log(\"printing error\");\n          console.log(error);\n        });\n\n    this.props.onOrderBurger(order);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    //clones - for immutable\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm ){\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n    }\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid,\n    })\n  }\n\n  render(){\n    const formElementsArray = [];\n    for(let key in this.state.orderForm){\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n    let form = null;\n    if(this.props.loading) {\n      form = <Spinner />\n    } else {\n      form = (\n        <form action=\"\">\n          {formElementsArray.map(formElement => (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n          ))}\n          <Button btnType='Success' disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\n        </form>\n      );\n    }\n    return(\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading,\n    //token: state.auth.token,\n    //userId: state.auth.userId,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    onOrderBurger: (orderData) => dispatch(actions.purchaseBurger(orderData))\n\n  }\n}\n\n//export default ContactData;\n\nfunction WithNavigate(props) {\n  let navigate = useNavigate();\n  const location = useLocation();\n\n  //return <Blog {...props} navigate={navigate} location={location} />\n  return <ContactData {...props} navigate={navigate} location={location} />\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(WithNavigate,axios));\n\n//export default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n\n"]},"metadata":{},"sourceType":"module"}