{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Orders extends React.Component {\n  componentDidMount() {\n    // this.props.onFetchOrders(this.props.token, this.props.userId);\n    this.props.onFetchOrders();\n  }\n\n  render() {\n    let orders = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 18\n    }, this);\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => /*#__PURE__*/_jsxDEV(Order, {\n        ingredients: order.ingredients,\n        price: order.price\n      }, order.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: orders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading // token: state.auth.token,\n    // userId: state.auth.userId\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Orders/Orders.js"],"names":["React","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","Component","componentDidMount","props","onFetchOrders","render","orders","loading","map","order","ingredients","price","id","mapStateToProps","state","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;;AAEA,MAAMC,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AACnCC,EAAAA,iBAAiB,GAAE;AAClB;AACA,SAAKC,KAAL,CAAWC,aAAX;AAEA;;AACDC,EAAAA,MAAM,GAAE;AACN,QAAIC,MAAM,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAb;;AACA,QAAI,CAAC,KAAKH,KAAL,CAAWI,OAAhB,EAAwB;AACtBD,MAAAA,MAAM,GACJ,KAAKH,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAsBC,KAAK,iBAC3B,QAAC,KAAD;AAEE,QAAA,WAAW,EAAEA,KAAK,CAACC,WAFrB;AAGE,QAAA,KAAK,EAAED,KAAK,CAACE;AAHf,SACOF,KAAK,CAACG,EADb;AAAA;AAAA;AAAA;AAAA,cADA,CADF;AAOD;;AACD,wBACE;AAAA,gBACGN;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAtBkC;;AAyBrC,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLR,IAAAA,MAAM,EAAEQ,KAAK,CAACR,MAAN,CAAaA,MADhB;AAELC,IAAAA,OAAO,EAAEO,KAAK,CAACR,MAAN,CAAaC,OAFjB,CAGL;AACA;;AAJK,GAAP;AAMD,CAPD;;AASA,MAAMQ,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLZ,IAAAA,aAAa,EAAE,MAAMY,QAAQ,CAAClB,OAAO,CAACmB,WAAR,EAAD;AADxB,GAAP;AAGD,CAJD;;AAKA,eAAevB,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAA7D,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends React.Component {\n  componentDidMount(){\n   // this.props.onFetchOrders(this.props.token, this.props.userId);\n   this.props.onFetchOrders();\n\n  }\n  render(){\n    let orders = <Spinner />\n    if (!this.props.loading){\n      orders =\n        this.props.orders.map(order => (\n        <Order\n          key={order.id}\n          ingredients={order.ingredients}\n          price={order.price} />\n      ))\n    }\n    return (\n      <div>\n        {orders}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    // token: state.auth.token,\n    // userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: () => dispatch(actions.fetchOrders())\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\n"]},"metadata":{},"sourceType":"module"}