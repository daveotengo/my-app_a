{"ast":null,"code":"var _jsxFileName = \"/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react'; //import { Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/auth_actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { checkValidity } from '../../shared/utility';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.inputChangedHandler = (e, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: e.target.value,\n          valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formEl => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formEl.config.elementType,\n      elementConfig: formEl.config.elementConfig,\n      value: formEl.config.value,\n      invalid: !formEl.config.valid,\n      shouldValidate: formEl.config.validation,\n      touched: formEl.config.touched,\n      changed: event => this.inputChangedHandler(event, formEl.id)\n    }, formEl.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, this);\n    }\n\n    let errorMsg = '';\n\n    if (this.props.error) {\n      errorMsg = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 18\n      }, this);\n    }\n\n    ;\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Navigate, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [authRedirect, errorMsg, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => this.submitHandler(e),\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Danger\",\n        clicked: this.switchAuthModeHandler,\n        children: [\"Switch to \", this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/daveotengo/Desktop/git/react/my-app_a/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","classes","actions","Spinner","checkValidity","Navigate","Auth","constructor","props","inputChangedHandler","e","controlName","updatedControls","state","controls","value","target","valid","validation","touched","setState","submitHandler","preventDefault","onAuth","email","password","isSignUp","switchAuthModeHandler","prevState","elementType","elementConfig","type","placeholder","required","isEmail","minLength","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formEl","event","loading","errorMsg","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//import { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/auth_actions';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { checkValidity } from '../../shared/utility';\nimport { Navigate } from 'react-router-dom';\n\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true,\n          },\n          valid: false,\n          touched: false,\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false,\n        },\n      },\n      isSignUp: true,\n    }\n  }\n\n  componentDidMount() {\n    if(!this.props.buildingBurger && this.props.authRedirectPath !== \"/\"){\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (e, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: e.target.value,\n        valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\n        touched: true\n      }\n    };\n    this.setState({\n      controls: updatedControls\n    })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {isSignUp: !prevState.isSignUp};\n    });\n  }\n\n  render(){\n    const formElementsArray = [];\n    for(let key in this.state.controls){\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n    let form = formElementsArray.map(formEl => (\n      <Input\n        key={formEl.id}\n        elementType={formEl.config.elementType}\n        elementConfig={formEl.config.elementConfig}\n        value={formEl.config.value}\n        invalid={!formEl.config.valid}\n        shouldValidate={formEl.config.validation}\n        touched={formEl.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formEl.id)}\n      />\n\n    ))\n    if(this.props.loading){\n      form = <Spinner />\n    }\n\n    let errorMsg = '';\n    if(this.props.error){\n      errorMsg = <p>{this.props.error.message}</p>\n    };\n    let authRedirect = null;\n    if (this.props.isAuthenticated){\n      authRedirect = <Navigate to={this.props.authRedirectPath} />\n    }\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMsg}\n        <form onSubmit={(e) => this.submitHandler(e)}>\n          { form }\n          <Button btnType=\"Success\">\n            Submit\n          </Button>\n        </form>\n        <Button\n          btnType=\"Danger\"\n          clicked={this.switchAuthModeHandler}>\n          Switch to {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}